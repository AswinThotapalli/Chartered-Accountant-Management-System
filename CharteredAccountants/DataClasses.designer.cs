#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CharteredAccountantsFYP
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CA_DB")]
	public partial class DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTblTask(TblTask instance);
    partial void UpdateTblTask(TblTask instance);
    partial void DeleteTblTask(TblTask instance);
    partial void InsertTblEvent(TblEvent instance);
    partial void UpdateTblEvent(TblEvent instance);
    partial void DeleteTblEvent(TblEvent instance);
    partial void InsertTblService(TblService instance);
    partial void UpdateTblService(TblService instance);
    partial void DeleteTblService(TblService instance);
    partial void InsertTblUser(TblUser instance);
    partial void UpdateTblUser(TblUser instance);
    partial void DeleteTblUser(TblUser instance);
    partial void InsertTblTasksRemark(TblTasksRemark instance);
    partial void UpdateTblTasksRemark(TblTasksRemark instance);
    partial void DeleteTblTasksRemark(TblTasksRemark instance);
    partial void InsertTblEventsRemark(TblEventsRemark instance);
    partial void UpdateTblEventsRemark(TblEventsRemark instance);
    partial void DeleteTblEventsRemark(TblEventsRemark instance);
    partial void InsertTblCounter(TblCounter instance);
    partial void UpdateTblCounter(TblCounter instance);
    partial void DeleteTblCounter(TblCounter instance);
    partial void InsertTblYear(TblYear instance);
    partial void UpdateTblYear(TblYear instance);
    partial void DeleteTblYear(TblYear instance);
    partial void InsertTblAudit(TblAudit instance);
    partial void UpdateTblAudit(TblAudit instance);
    partial void DeleteTblAudit(TblAudit instance);
    partial void InsertTblCorporate(TblCorporate instance);
    partial void UpdateTblCorporate(TblCorporate instance);
    partial void DeleteTblCorporate(TblCorporate instance);
    partial void InsertTblTax(TblTax instance);
    partial void UpdateTblTax(TblTax instance);
    partial void DeleteTblTax(TblTax instance);
    partial void InsertTblClient(TblClient instance);
    partial void UpdateTblClient(TblClient instance);
    partial void DeleteTblClient(TblClient instance);
    partial void InsertTblBusinessType(TblBusinessType instance);
    partial void UpdateTblBusinessType(TblBusinessType instance);
    partial void DeleteTblBusinessType(TblBusinessType instance);
    partial void InserttblAttendance(tblAttendance instance);
    partial void UpdatetblAttendance(tblAttendance instance);
    partial void DeletetblAttendance(tblAttendance instance);
    #endregion
		
		public DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CA_DBConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TblTask> TblTasks
		{
			get
			{
				return this.GetTable<TblTask>();
			}
		}
		
		public System.Data.Linq.Table<TblEvent> TblEvents
		{
			get
			{
				return this.GetTable<TblEvent>();
			}
		}
		
		public System.Data.Linq.Table<TblService> TblServices
		{
			get
			{
				return this.GetTable<TblService>();
			}
		}
		
		public System.Data.Linq.Table<TblUser> TblUsers
		{
			get
			{
				return this.GetTable<TblUser>();
			}
		}
		
		public System.Data.Linq.Table<TblTasksRemark> TblTasksRemarks
		{
			get
			{
				return this.GetTable<TblTasksRemark>();
			}
		}
		
		public System.Data.Linq.Table<TblEventsRemark> TblEventsRemarks
		{
			get
			{
				return this.GetTable<TblEventsRemark>();
			}
		}
		
		public System.Data.Linq.Table<TblCounter> TblCounters
		{
			get
			{
				return this.GetTable<TblCounter>();
			}
		}
		
		public System.Data.Linq.Table<TblYear> TblYears
		{
			get
			{
				return this.GetTable<TblYear>();
			}
		}
		
		public System.Data.Linq.Table<TblAudit> TblAudits
		{
			get
			{
				return this.GetTable<TblAudit>();
			}
		}
		
		public System.Data.Linq.Table<TblCorporate> TblCorporates
		{
			get
			{
				return this.GetTable<TblCorporate>();
			}
		}
		
		public System.Data.Linq.Table<TblTax> TblTaxes
		{
			get
			{
				return this.GetTable<TblTax>();
			}
		}
		
		public System.Data.Linq.Table<TblClient> TblClients
		{
			get
			{
				return this.GetTable<TblClient>();
			}
		}
		
		public System.Data.Linq.Table<TblBusinessType> TblBusinessTypes
		{
			get
			{
				return this.GetTable<TblBusinessType>();
			}
		}
		
		public System.Data.Linq.Table<tblAttendance> tblAttendances
		{
			get
			{
				return this.GetTable<tblAttendance>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblTasks")]
	public partial class TblTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _UserId;
		
		private string _Name;
		
		private string _Discription;
		
		private long _Assignee;
		
		private string _Priority;
		
		private string _ImageLink;
		
		private int _Status;
		
		private long _StatusChangedBy;
		
		private long _UpdatedBy;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<long> _DeletedBy;
		
		private EntitySet<TblTasksRemark> _TblTasksRemarks;
		
		private EntityRef<TblUser> _TblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnAssigneeChanging(long value);
    partial void OnAssigneeChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    partial void OnImageLinkChanging(string value);
    partial void OnImageLinkChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnStatusChangedByChanging(long value);
    partial void OnStatusChangedByChanged();
    partial void OnUpdatedByChanging(long value);
    partial void OnUpdatedByChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnDeletedByChanging(System.Nullable<long> value);
    partial void OnDeletedByChanged();
    #endregion
		
		public TblTask()
		{
			this._TblTasksRemarks = new EntitySet<TblTasksRemark>(new Action<TblTasksRemark>(this.attach_TblTasksRemarks), new Action<TblTasksRemark>(this.detach_TblTasksRemarks));
			this._TblUser = default(EntityRef<TblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="VarChar(1000)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignee", DbType="BigInt NOT NULL")]
		public long Assignee
		{
			get
			{
				return this._Assignee;
			}
			set
			{
				if ((this._Assignee != value))
				{
					this.OnAssigneeChanging(value);
					this.SendPropertyChanging();
					this._Assignee = value;
					this.SendPropertyChanged("Assignee");
					this.OnAssigneeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLink", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string ImageLink
		{
			get
			{
				return this._ImageLink;
			}
			set
			{
				if ((this._ImageLink != value))
				{
					this.OnImageLinkChanging(value);
					this.SendPropertyChanging();
					this._ImageLink = value;
					this.SendPropertyChanged("ImageLink");
					this.OnImageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusChangedBy", DbType="BigInt NOT NULL")]
		public long StatusChangedBy
		{
			get
			{
				return this._StatusChangedBy;
			}
			set
			{
				if ((this._StatusChangedBy != value))
				{
					this.OnStatusChangedByChanging(value);
					this.SendPropertyChanging();
					this._StatusChangedBy = value;
					this.SendPropertyChanged("StatusChangedBy");
					this.OnStatusChangedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="BigInt NOT NULL")]
		public long UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="BigInt")]
		public System.Nullable<long> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblTask_TblTasksRemark", Storage="_TblTasksRemarks", ThisKey="Id", OtherKey="TaskId")]
		public EntitySet<TblTasksRemark> TblTasksRemarks
		{
			get
			{
				return this._TblTasksRemarks;
			}
			set
			{
				this._TblTasksRemarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblTask", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblTasks.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblTasks.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblTasksRemarks(TblTasksRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblTask = this;
		}
		
		private void detach_TblTasksRemarks(TblTasksRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblTask = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblEvents")]
	public partial class TblEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Discription;
		
		private string _imageURL;
		
		private int _UserId;
		
		private System.DateTime _EventDate;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<long> _DeletedBy;
		
		private System.Nullable<long> _UpdatedBy;
		
		private EntitySet<TblEventsRemark> _TblEventsRemarks;
		
		private EntityRef<TblUser> _TblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnimageURLChanging(string value);
    partial void OnimageURLChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnDeletedByChanging(System.Nullable<long> value);
    partial void OnDeletedByChanged();
    partial void OnUpdatedByChanging(System.Nullable<long> value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public TblEvent()
		{
			this._TblEventsRemarks = new EntitySet<TblEventsRemark>(new Action<TblEventsRemark>(this.attach_TblEventsRemarks), new Action<TblEventsRemark>(this.detach_TblEventsRemarks));
			this._TblUser = default(EntityRef<TblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="VarChar(500)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageURL", DbType="VarChar(2000)")]
		public string imageURL
		{
			get
			{
				return this._imageURL;
			}
			set
			{
				if ((this._imageURL != value))
				{
					this.OnimageURLChanging(value);
					this.SendPropertyChanging();
					this._imageURL = value;
					this.SendPropertyChanged("imageURL");
					this.OnimageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="BigInt")]
		public System.Nullable<long> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="BigInt")]
		public System.Nullable<long> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblEvent_TblEventsRemark", Storage="_TblEventsRemarks", ThisKey="Id", OtherKey="EventId")]
		public EntitySet<TblEventsRemark> TblEventsRemarks
		{
			get
			{
				return this._TblEventsRemarks;
			}
			set
			{
				this._TblEventsRemarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblEvent", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblEvents.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblEvents.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblEventsRemarks(TblEventsRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblEvent = this;
		}
		
		private void detach_TblEventsRemarks(TblEventsRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblServices")]
	public partial class TblService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private System.Nullable<bool> _Audit;
		
		private System.Nullable<bool> _Corporate;
		
		private System.Nullable<bool> _Accounting;
		
		private System.Nullable<bool> _Legal;
		
		private System.Nullable<bool> _Taxation;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnAuditChanging(System.Nullable<bool> value);
    partial void OnAuditChanged();
    partial void OnCorporateChanging(System.Nullable<bool> value);
    partial void OnCorporateChanged();
    partial void OnAccountingChanging(System.Nullable<bool> value);
    partial void OnAccountingChanged();
    partial void OnLegalChanging(System.Nullable<bool> value);
    partial void OnLegalChanged();
    partial void OnTaxationChanging(System.Nullable<bool> value);
    partial void OnTaxationChanged();
    #endregion
		
		public TblService()
		{
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Audit", DbType="Bit")]
		public System.Nullable<bool> Audit
		{
			get
			{
				return this._Audit;
			}
			set
			{
				if ((this._Audit != value))
				{
					this.OnAuditChanging(value);
					this.SendPropertyChanging();
					this._Audit = value;
					this.SendPropertyChanged("Audit");
					this.OnAuditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Corporate", DbType="Bit")]
		public System.Nullable<bool> Corporate
		{
			get
			{
				return this._Corporate;
			}
			set
			{
				if ((this._Corporate != value))
				{
					this.OnCorporateChanging(value);
					this.SendPropertyChanging();
					this._Corporate = value;
					this.SendPropertyChanged("Corporate");
					this.OnCorporateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accounting", DbType="Bit")]
		public System.Nullable<bool> Accounting
		{
			get
			{
				return this._Accounting;
			}
			set
			{
				if ((this._Accounting != value))
				{
					this.OnAccountingChanging(value);
					this.SendPropertyChanging();
					this._Accounting = value;
					this.SendPropertyChanged("Accounting");
					this.OnAccountingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Legal", DbType="Bit")]
		public System.Nullable<bool> Legal
		{
			get
			{
				return this._Legal;
			}
			set
			{
				if ((this._Legal != value))
				{
					this.OnLegalChanging(value);
					this.SendPropertyChanging();
					this._Legal = value;
					this.SendPropertyChanged("Legal");
					this.OnLegalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taxation", DbType="Bit")]
		public System.Nullable<bool> Taxation
		{
			get
			{
				return this._Taxation;
			}
			set
			{
				if ((this._Taxation != value))
				{
					this.OnTaxationChanging(value);
					this.SendPropertyChanging();
					this._Taxation = value;
					this.SendPropertyChanged("Taxation");
					this.OnTaxationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblService", Storage="_TblClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.TblServices.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.TblServices.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblUsers")]
	public partial class TblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _Password;
		
		private bool _IsAdmin;
		
		private bool _IsActive;
		
		private bool _IsOnline;
		
		private string _imageURL;
		
		private System.DateTime _CreationDate;
		
		private string _ImageURL_DDL;
		
		private bool _IsDeleted;
		
		private EntitySet<TblTask> _TblTasks;
		
		private EntitySet<TblEvent> _TblEvents;
		
		private EntitySet<TblTasksRemark> _TblTasksRemarks;
		
		private EntitySet<TblEventsRemark> _TblEventsRemarks;
		
		private EntitySet<TblAudit> _TblAudits;
		
		private EntitySet<TblCorporate> _TblCorporates;
		
		private EntitySet<TblTax> _TblTaxes;
		
		private EntitySet<TblClient> _TblClients;
		
		private EntitySet<tblAttendance> _tblAttendances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsOnlineChanging(bool value);
    partial void OnIsOnlineChanged();
    partial void OnimageURLChanging(string value);
    partial void OnimageURLChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnImageURL_DDLChanging(string value);
    partial void OnImageURL_DDLChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public TblUser()
		{
			this._TblTasks = new EntitySet<TblTask>(new Action<TblTask>(this.attach_TblTasks), new Action<TblTask>(this.detach_TblTasks));
			this._TblEvents = new EntitySet<TblEvent>(new Action<TblEvent>(this.attach_TblEvents), new Action<TblEvent>(this.detach_TblEvents));
			this._TblTasksRemarks = new EntitySet<TblTasksRemark>(new Action<TblTasksRemark>(this.attach_TblTasksRemarks), new Action<TblTasksRemark>(this.detach_TblTasksRemarks));
			this._TblEventsRemarks = new EntitySet<TblEventsRemark>(new Action<TblEventsRemark>(this.attach_TblEventsRemarks), new Action<TblEventsRemark>(this.detach_TblEventsRemarks));
			this._TblAudits = new EntitySet<TblAudit>(new Action<TblAudit>(this.attach_TblAudits), new Action<TblAudit>(this.detach_TblAudits));
			this._TblCorporates = new EntitySet<TblCorporate>(new Action<TblCorporate>(this.attach_TblCorporates), new Action<TblCorporate>(this.detach_TblCorporates));
			this._TblTaxes = new EntitySet<TblTax>(new Action<TblTax>(this.attach_TblTaxes), new Action<TblTax>(this.detach_TblTaxes));
			this._TblClients = new EntitySet<TblClient>(new Action<TblClient>(this.attach_TblClients), new Action<TblClient>(this.detach_TblClients));
			this._tblAttendances = new EntitySet<tblAttendance>(new Action<tblAttendance>(this.attach_tblAttendances), new Action<tblAttendance>(this.detach_tblAttendances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnline", DbType="Bit NOT NULL")]
		public bool IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageURL", DbType="VarChar(2100) NOT NULL", CanBeNull=false)]
		public string imageURL
		{
			get
			{
				return this._imageURL;
			}
			set
			{
				if ((this._imageURL != value))
				{
					this.OnimageURLChanging(value);
					this.SendPropertyChanging();
					this._imageURL = value;
					this.SendPropertyChanged("imageURL");
					this.OnimageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL_DDL", DbType="VarChar(2100) NOT NULL", CanBeNull=false)]
		public string ImageURL_DDL
		{
			get
			{
				return this._ImageURL_DDL;
			}
			set
			{
				if ((this._ImageURL_DDL != value))
				{
					this.OnImageURL_DDLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL_DDL = value;
					this.SendPropertyChanged("ImageURL_DDL");
					this.OnImageURL_DDLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblTask", Storage="_TblTasks", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TblTask> TblTasks
		{
			get
			{
				return this._TblTasks;
			}
			set
			{
				this._TblTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblEvent", Storage="_TblEvents", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TblEvent> TblEvents
		{
			get
			{
				return this._TblEvents;
			}
			set
			{
				this._TblEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblTasksRemark", Storage="_TblTasksRemarks", ThisKey="Id", OtherKey="CommenterId")]
		public EntitySet<TblTasksRemark> TblTasksRemarks
		{
			get
			{
				return this._TblTasksRemarks;
			}
			set
			{
				this._TblTasksRemarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblEventsRemark", Storage="_TblEventsRemarks", ThisKey="Id", OtherKey="CommenterId")]
		public EntitySet<TblEventsRemark> TblEventsRemarks
		{
			get
			{
				return this._TblEventsRemarks;
			}
			set
			{
				this._TblEventsRemarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblAudit", Storage="_TblAudits", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TblAudit> TblAudits
		{
			get
			{
				return this._TblAudits;
			}
			set
			{
				this._TblAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblCorporate", Storage="_TblCorporates", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TblCorporate> TblCorporates
		{
			get
			{
				return this._TblCorporates;
			}
			set
			{
				this._TblCorporates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblTax", Storage="_TblTaxes", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TblTax> TblTaxes
		{
			get
			{
				return this._TblTaxes;
			}
			set
			{
				this._TblTaxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblClient", Storage="_TblClients", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<TblClient> TblClients
		{
			get
			{
				return this._TblClients;
			}
			set
			{
				this._TblClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_tblAttendance", Storage="_tblAttendances", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<tblAttendance> tblAttendances
		{
			get
			{
				return this._tblAttendances;
			}
			set
			{
				this._tblAttendances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblTasks(TblTask entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblTasks(TblTask entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblEvents(TblEvent entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblEvents(TblEvent entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblTasksRemarks(TblTasksRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblTasksRemarks(TblTasksRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblEventsRemarks(TblEventsRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblEventsRemarks(TblEventsRemark entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblAudits(TblAudit entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblAudits(TblAudit entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblCorporates(TblCorporate entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblCorporates(TblCorporate entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblTaxes(TblTax entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblTaxes(TblTax entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_TblClients(TblClient entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblClients(TblClient entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
		
		private void attach_tblAttendances(tblAttendance entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_tblAttendances(tblAttendance entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblTasksRemarks")]
	public partial class TblTasksRemark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CommenterId;
		
		private string _Comment;
		
		private long _TaskId;
		
		private EntityRef<TblUser> _TblUser;
		
		private EntityRef<TblTask> _TblTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommenterIdChanging(int value);
    partial void OnCommenterIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnTaskIdChanging(long value);
    partial void OnTaskIdChanged();
    #endregion
		
		public TblTasksRemark()
		{
			this._TblUser = default(EntityRef<TblUser>);
			this._TblTask = default(EntityRef<TblTask>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommenterId", DbType="Int NOT NULL")]
		public int CommenterId
		{
			get
			{
				return this._CommenterId;
			}
			set
			{
				if ((this._CommenterId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommenterIdChanging(value);
					this.SendPropertyChanging();
					this._CommenterId = value;
					this.SendPropertyChanged("CommenterId");
					this.OnCommenterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="BigInt NOT NULL")]
		public long TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._TblTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblTasksRemark", Storage="_TblUser", ThisKey="CommenterId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblTasksRemarks.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblTasksRemarks.Add(this);
						this._CommenterId = value.Id;
					}
					else
					{
						this._CommenterId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblTask_TblTasksRemark", Storage="_TblTask", ThisKey="TaskId", OtherKey="Id", IsForeignKey=true)]
		public TblTask TblTask
		{
			get
			{
				return this._TblTask.Entity;
			}
			set
			{
				TblTask previousValue = this._TblTask.Entity;
				if (((previousValue != value) 
							|| (this._TblTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblTask.Entity = null;
						previousValue.TblTasksRemarks.Remove(this);
					}
					this._TblTask.Entity = value;
					if ((value != null))
					{
						value.TblTasksRemarks.Add(this);
						this._TaskId = value.Id;
					}
					else
					{
						this._TaskId = default(long);
					}
					this.SendPropertyChanged("TblTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblEventsRemarks")]
	public partial class TblEventsRemark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CommenterId;
		
		private string _Comment;
		
		private int _EventId;
		
		private EntityRef<TblUser> _TblUser;
		
		private EntityRef<TblEvent> _TblEvent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommenterIdChanging(int value);
    partial void OnCommenterIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    #endregion
		
		public TblEventsRemark()
		{
			this._TblUser = default(EntityRef<TblUser>);
			this._TblEvent = default(EntityRef<TblEvent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommenterId", DbType="Int NOT NULL")]
		public int CommenterId
		{
			get
			{
				return this._CommenterId;
			}
			set
			{
				if ((this._CommenterId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommenterIdChanging(value);
					this.SendPropertyChanging();
					this._CommenterId = value;
					this.SendPropertyChanged("CommenterId");
					this.OnCommenterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._TblEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblEventsRemark", Storage="_TblUser", ThisKey="CommenterId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblEventsRemarks.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblEventsRemarks.Add(this);
						this._CommenterId = value.Id;
					}
					else
					{
						this._CommenterId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblEvent_TblEventsRemark", Storage="_TblEvent", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
		public TblEvent TblEvent
		{
			get
			{
				return this._TblEvent.Entity;
			}
			set
			{
				TblEvent previousValue = this._TblEvent.Entity;
				if (((previousValue != value) 
							|| (this._TblEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblEvent.Entity = null;
						previousValue.TblEventsRemarks.Remove(this);
					}
					this._TblEvent.Entity = value;
					if ((value != null))
					{
						value.TblEventsRemarks.Add(this);
						this._EventId = value.Id;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("TblEvent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblCounter")]
	public partial class TblCounter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _count;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncountChanging(string value);
    partial void OncountChanged();
    #endregion
		
		public TblCounter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="VarChar(50)")]
		public string count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblYear")]
	public partial class TblYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Year;
		
		private EntitySet<TblAudit> _TblAudits;
		
		private EntitySet<TblCorporate> _TblCorporates;
		
		private EntitySet<TblTax> _TblTaxes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    #endregion
		
		public TblYear()
		{
			this._TblAudits = new EntitySet<TblAudit>(new Action<TblAudit>(this.attach_TblAudits), new Action<TblAudit>(this.detach_TblAudits));
			this._TblCorporates = new EntitySet<TblCorporate>(new Action<TblCorporate>(this.attach_TblCorporates), new Action<TblCorporate>(this.detach_TblCorporates));
			this._TblTaxes = new EntitySet<TblTax>(new Action<TblTax>(this.attach_TblTaxes), new Action<TblTax>(this.detach_TblTaxes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblYear_TblAudit", Storage="_TblAudits", ThisKey="Id", OtherKey="YearId")]
		public EntitySet<TblAudit> TblAudits
		{
			get
			{
				return this._TblAudits;
			}
			set
			{
				this._TblAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblYear_TblCorporate", Storage="_TblCorporates", ThisKey="Id", OtherKey="YearId")]
		public EntitySet<TblCorporate> TblCorporates
		{
			get
			{
				return this._TblCorporates;
			}
			set
			{
				this._TblCorporates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblYear_TblTax", Storage="_TblTaxes", ThisKey="Id", OtherKey="YearId")]
		public EntitySet<TblTax> TblTaxes
		{
			get
			{
				return this._TblTaxes;
			}
			set
			{
				this._TblTaxes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblAudits(TblAudit entity)
		{
			this.SendPropertyChanging();
			entity.TblYear = this;
		}
		
		private void detach_TblAudits(TblAudit entity)
		{
			this.SendPropertyChanging();
			entity.TblYear = null;
		}
		
		private void attach_TblCorporates(TblCorporate entity)
		{
			this.SendPropertyChanging();
			entity.TblYear = this;
		}
		
		private void detach_TblCorporates(TblCorporate entity)
		{
			this.SendPropertyChanging();
			entity.TblYear = null;
		}
		
		private void attach_TblTaxes(TblTax entity)
		{
			this.SendPropertyChanging();
			entity.TblYear = this;
		}
		
		private void detach_TblTaxes(TblTax entity)
		{
			this.SendPropertyChanging();
			entity.TblYear = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblAudit")]
	public partial class TblAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private int _UserId;
		
		private System.Nullable<int> _YearId;
		
		private string _LastChangesInfo;
		
		private System.Nullable<long> _UpdatedBy;
		
		private string _FilePathNew;
		
		private string _FilePathOld;
		
		private EntityRef<TblUser> _TblUser;
		
		private EntityRef<TblYear> _TblYear;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearIdChanging(System.Nullable<int> value);
    partial void OnYearIdChanged();
    partial void OnLastChangesInfoChanging(string value);
    partial void OnLastChangesInfoChanged();
    partial void OnUpdatedByChanging(System.Nullable<long> value);
    partial void OnUpdatedByChanged();
    partial void OnFilePathNewChanging(string value);
    partial void OnFilePathNewChanged();
    partial void OnFilePathOldChanging(string value);
    partial void OnFilePathOldChanged();
    #endregion
		
		public TblAudit()
		{
			this._TblUser = default(EntityRef<TblUser>);
			this._TblYear = default(EntityRef<TblYear>);
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", DbType="Int")]
		public System.Nullable<int> YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					if (this._TblYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangesInfo", DbType="VarChar(500)")]
		public string LastChangesInfo
		{
			get
			{
				return this._LastChangesInfo;
			}
			set
			{
				if ((this._LastChangesInfo != value))
				{
					this.OnLastChangesInfoChanging(value);
					this.SendPropertyChanging();
					this._LastChangesInfo = value;
					this.SendPropertyChanged("LastChangesInfo");
					this.OnLastChangesInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="BigInt")]
		public System.Nullable<long> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePathNew", DbType="VarChar(5000)")]
		public string FilePathNew
		{
			get
			{
				return this._FilePathNew;
			}
			set
			{
				if ((this._FilePathNew != value))
				{
					this.OnFilePathNewChanging(value);
					this.SendPropertyChanging();
					this._FilePathNew = value;
					this.SendPropertyChanged("FilePathNew");
					this.OnFilePathNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePathOld", DbType="VarChar(5000)")]
		public string FilePathOld
		{
			get
			{
				return this._FilePathOld;
			}
			set
			{
				if ((this._FilePathOld != value))
				{
					this.OnFilePathOldChanging(value);
					this.SendPropertyChanging();
					this._FilePathOld = value;
					this.SendPropertyChanged("FilePathOld");
					this.OnFilePathOldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblAudit", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblAudits.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblAudits.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblYear_TblAudit", Storage="_TblYear", ThisKey="YearId", OtherKey="Id", IsForeignKey=true)]
		public TblYear TblYear
		{
			get
			{
				return this._TblYear.Entity;
			}
			set
			{
				TblYear previousValue = this._TblYear.Entity;
				if (((previousValue != value) 
							|| (this._TblYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblYear.Entity = null;
						previousValue.TblAudits.Remove(this);
					}
					this._TblYear.Entity = value;
					if ((value != null))
					{
						value.TblAudits.Add(this);
						this._YearId = value.Id;
					}
					else
					{
						this._YearId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblAudit", Storage="_TblClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.TblAudits.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.TblAudits.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblCorporate")]
	public partial class TblCorporate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private int _UserId;
		
		private System.Nullable<int> _YearId;
		
		private string _LastChangesInfo;
		
		private System.Nullable<long> _UpdatedBy;
		
		private string _FilePathNew;
		
		private string _FilePathOld;
		
		private EntityRef<TblUser> _TblUser;
		
		private EntityRef<TblYear> _TblYear;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearIdChanging(System.Nullable<int> value);
    partial void OnYearIdChanged();
    partial void OnLastChangesInfoChanging(string value);
    partial void OnLastChangesInfoChanged();
    partial void OnUpdatedByChanging(System.Nullable<long> value);
    partial void OnUpdatedByChanged();
    partial void OnFilePathNewChanging(string value);
    partial void OnFilePathNewChanged();
    partial void OnFilePathOldChanging(string value);
    partial void OnFilePathOldChanged();
    #endregion
		
		public TblCorporate()
		{
			this._TblUser = default(EntityRef<TblUser>);
			this._TblYear = default(EntityRef<TblYear>);
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", DbType="Int")]
		public System.Nullable<int> YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					if (this._TblYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangesInfo", DbType="VarChar(500)")]
		public string LastChangesInfo
		{
			get
			{
				return this._LastChangesInfo;
			}
			set
			{
				if ((this._LastChangesInfo != value))
				{
					this.OnLastChangesInfoChanging(value);
					this.SendPropertyChanging();
					this._LastChangesInfo = value;
					this.SendPropertyChanged("LastChangesInfo");
					this.OnLastChangesInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="BigInt")]
		public System.Nullable<long> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePathNew", DbType="VarChar(5000)")]
		public string FilePathNew
		{
			get
			{
				return this._FilePathNew;
			}
			set
			{
				if ((this._FilePathNew != value))
				{
					this.OnFilePathNewChanging(value);
					this.SendPropertyChanging();
					this._FilePathNew = value;
					this.SendPropertyChanged("FilePathNew");
					this.OnFilePathNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePathOld", DbType="VarChar(5000)")]
		public string FilePathOld
		{
			get
			{
				return this._FilePathOld;
			}
			set
			{
				if ((this._FilePathOld != value))
				{
					this.OnFilePathOldChanging(value);
					this.SendPropertyChanging();
					this._FilePathOld = value;
					this.SendPropertyChanged("FilePathOld");
					this.OnFilePathOldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblCorporate", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblCorporates.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblCorporates.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblYear_TblCorporate", Storage="_TblYear", ThisKey="YearId", OtherKey="Id", IsForeignKey=true)]
		public TblYear TblYear
		{
			get
			{
				return this._TblYear.Entity;
			}
			set
			{
				TblYear previousValue = this._TblYear.Entity;
				if (((previousValue != value) 
							|| (this._TblYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblYear.Entity = null;
						previousValue.TblCorporates.Remove(this);
					}
					this._TblYear.Entity = value;
					if ((value != null))
					{
						value.TblCorporates.Add(this);
						this._YearId = value.Id;
					}
					else
					{
						this._YearId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblCorporate", Storage="_TblClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.TblCorporates.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.TblCorporates.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblTax")]
	public partial class TblTax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private int _UserId;
		
		private System.Nullable<int> _YearId;
		
		private string _LastChangesInfo;
		
		private System.Nullable<long> _UpdatedBy;
		
		private string _FilePathNew;
		
		private string _FilePathOld;
		
		private EntityRef<TblUser> _TblUser;
		
		private EntityRef<TblYear> _TblYear;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearIdChanging(System.Nullable<int> value);
    partial void OnYearIdChanged();
    partial void OnLastChangesInfoChanging(string value);
    partial void OnLastChangesInfoChanged();
    partial void OnUpdatedByChanging(System.Nullable<long> value);
    partial void OnUpdatedByChanged();
    partial void OnFilePathNewChanging(string value);
    partial void OnFilePathNewChanged();
    partial void OnFilePathOldChanging(string value);
    partial void OnFilePathOldChanged();
    #endregion
		
		public TblTax()
		{
			this._TblUser = default(EntityRef<TblUser>);
			this._TblYear = default(EntityRef<TblYear>);
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", DbType="Int")]
		public System.Nullable<int> YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					if (this._TblYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangesInfo", DbType="VarChar(500)")]
		public string LastChangesInfo
		{
			get
			{
				return this._LastChangesInfo;
			}
			set
			{
				if ((this._LastChangesInfo != value))
				{
					this.OnLastChangesInfoChanging(value);
					this.SendPropertyChanging();
					this._LastChangesInfo = value;
					this.SendPropertyChanged("LastChangesInfo");
					this.OnLastChangesInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="BigInt")]
		public System.Nullable<long> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePathNew", DbType="VarChar(5000)")]
		public string FilePathNew
		{
			get
			{
				return this._FilePathNew;
			}
			set
			{
				if ((this._FilePathNew != value))
				{
					this.OnFilePathNewChanging(value);
					this.SendPropertyChanging();
					this._FilePathNew = value;
					this.SendPropertyChanged("FilePathNew");
					this.OnFilePathNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePathOld", DbType="VarChar(5000)")]
		public string FilePathOld
		{
			get
			{
				return this._FilePathOld;
			}
			set
			{
				if ((this._FilePathOld != value))
				{
					this.OnFilePathOldChanging(value);
					this.SendPropertyChanging();
					this._FilePathOld = value;
					this.SendPropertyChanged("FilePathOld");
					this.OnFilePathOldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblTax", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblTaxes.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblTaxes.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblYear_TblTax", Storage="_TblYear", ThisKey="YearId", OtherKey="Id", IsForeignKey=true)]
		public TblYear TblYear
		{
			get
			{
				return this._TblYear.Entity;
			}
			set
			{
				TblYear previousValue = this._TblYear.Entity;
				if (((previousValue != value) 
							|| (this._TblYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblYear.Entity = null;
						previousValue.TblTaxes.Remove(this);
					}
					this._TblYear.Entity = value;
					if ((value != null))
					{
						value.TblTaxes.Add(this);
						this._YearId = value.Id;
					}
					else
					{
						this._YearId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblTax", Storage="_TblClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.TblTaxes.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.TblTaxes.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblClients")]
	public partial class TblClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _BusinessType;
		
		private System.Nullable<int> _TypeOfCompany;
		
		private int _LimitedBy;
		
		private System.Nullable<double> _ShareValue1;
		
		private System.Nullable<double> _ShareValue2;
		
		private System.Nullable<double> _ShareCapitalProduct;
		
		private string _BusinessObjectives;
		
		private string _CNIC;
		
		private string _IncorporationNo;
		
		private string _RegistrationNo;
		
		private string _RegisteredWith;
		
		private string _Address;
		
		private string _Email;
		
		private string _PhoneNo;
		
		private string _MobileNo;
		
		private string _FaxNo;
		
		private System.Nullable<int> _UserId;
		
		private long _CreatedById;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<long> _UpdatedById;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<bool> _IsActive;
		
		private string _NTN;
		
		private System.Nullable<int> _PINCode;
		
		private System.Nullable<int> _FBRLogin;
		
		private string _FBRPassword;
		
		private EntitySet<TblService> _TblServices;
		
		private EntitySet<TblAudit> _TblAudits;
		
		private EntitySet<TblCorporate> _TblCorporates;
		
		private EntitySet<TblTax> _TblTaxes;
		
		private EntitySet<TblBusinessType> _TblBusinessTypes;
		
		private EntityRef<TblUser> _TblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBusinessTypeChanging(int value);
    partial void OnBusinessTypeChanged();
    partial void OnTypeOfCompanyChanging(System.Nullable<int> value);
    partial void OnTypeOfCompanyChanged();
    partial void OnLimitedByChanging(int value);
    partial void OnLimitedByChanged();
    partial void OnShareValue1Changing(System.Nullable<double> value);
    partial void OnShareValue1Changed();
    partial void OnShareValue2Changing(System.Nullable<double> value);
    partial void OnShareValue2Changed();
    partial void OnShareCapitalProductChanging(System.Nullable<double> value);
    partial void OnShareCapitalProductChanged();
    partial void OnBusinessObjectivesChanging(string value);
    partial void OnBusinessObjectivesChanged();
    partial void OnCNICChanging(string value);
    partial void OnCNICChanged();
    partial void OnIncorporationNoChanging(string value);
    partial void OnIncorporationNoChanged();
    partial void OnRegistrationNoChanging(string value);
    partial void OnRegistrationNoChanged();
    partial void OnRegisteredWithChanging(string value);
    partial void OnRegisteredWithChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    partial void OnMobileNoChanging(string value);
    partial void OnMobileNoChanged();
    partial void OnFaxNoChanging(string value);
    partial void OnFaxNoChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCreatedByIdChanging(long value);
    partial void OnCreatedByIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedByIdChanging(System.Nullable<long> value);
    partial void OnUpdatedByIdChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnNTNChanging(string value);
    partial void OnNTNChanged();
    partial void OnPINCodeChanging(System.Nullable<int> value);
    partial void OnPINCodeChanged();
    partial void OnFBRLoginChanging(System.Nullable<int> value);
    partial void OnFBRLoginChanged();
    partial void OnFBRPasswordChanging(string value);
    partial void OnFBRPasswordChanged();
    #endregion
		
		public TblClient()
		{
			this._TblServices = new EntitySet<TblService>(new Action<TblService>(this.attach_TblServices), new Action<TblService>(this.detach_TblServices));
			this._TblAudits = new EntitySet<TblAudit>(new Action<TblAudit>(this.attach_TblAudits), new Action<TblAudit>(this.detach_TblAudits));
			this._TblCorporates = new EntitySet<TblCorporate>(new Action<TblCorporate>(this.attach_TblCorporates), new Action<TblCorporate>(this.detach_TblCorporates));
			this._TblTaxes = new EntitySet<TblTax>(new Action<TblTax>(this.attach_TblTaxes), new Action<TblTax>(this.detach_TblTaxes));
			this._TblBusinessTypes = new EntitySet<TblBusinessType>(new Action<TblBusinessType>(this.attach_TblBusinessTypes), new Action<TblBusinessType>(this.detach_TblBusinessTypes));
			this._TblUser = default(EntityRef<TblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessType", DbType="Int NOT NULL")]
		public int BusinessType
		{
			get
			{
				return this._BusinessType;
			}
			set
			{
				if ((this._BusinessType != value))
				{
					this.OnBusinessTypeChanging(value);
					this.SendPropertyChanging();
					this._BusinessType = value;
					this.SendPropertyChanged("BusinessType");
					this.OnBusinessTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfCompany", DbType="Int")]
		public System.Nullable<int> TypeOfCompany
		{
			get
			{
				return this._TypeOfCompany;
			}
			set
			{
				if ((this._TypeOfCompany != value))
				{
					this.OnTypeOfCompanyChanging(value);
					this.SendPropertyChanging();
					this._TypeOfCompany = value;
					this.SendPropertyChanged("TypeOfCompany");
					this.OnTypeOfCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitedBy", DbType="Int NOT NULL")]
		public int LimitedBy
		{
			get
			{
				return this._LimitedBy;
			}
			set
			{
				if ((this._LimitedBy != value))
				{
					this.OnLimitedByChanging(value);
					this.SendPropertyChanging();
					this._LimitedBy = value;
					this.SendPropertyChanged("LimitedBy");
					this.OnLimitedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareValue1", DbType="Float")]
		public System.Nullable<double> ShareValue1
		{
			get
			{
				return this._ShareValue1;
			}
			set
			{
				if ((this._ShareValue1 != value))
				{
					this.OnShareValue1Changing(value);
					this.SendPropertyChanging();
					this._ShareValue1 = value;
					this.SendPropertyChanged("ShareValue1");
					this.OnShareValue1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareValue2", DbType="Float")]
		public System.Nullable<double> ShareValue2
		{
			get
			{
				return this._ShareValue2;
			}
			set
			{
				if ((this._ShareValue2 != value))
				{
					this.OnShareValue2Changing(value);
					this.SendPropertyChanging();
					this._ShareValue2 = value;
					this.SendPropertyChanged("ShareValue2");
					this.OnShareValue2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareCapitalProduct", DbType="Float")]
		public System.Nullable<double> ShareCapitalProduct
		{
			get
			{
				return this._ShareCapitalProduct;
			}
			set
			{
				if ((this._ShareCapitalProduct != value))
				{
					this.OnShareCapitalProductChanging(value);
					this.SendPropertyChanging();
					this._ShareCapitalProduct = value;
					this.SendPropertyChanged("ShareCapitalProduct");
					this.OnShareCapitalProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessObjectives", DbType="VarChar(50)")]
		public string BusinessObjectives
		{
			get
			{
				return this._BusinessObjectives;
			}
			set
			{
				if ((this._BusinessObjectives != value))
				{
					this.OnBusinessObjectivesChanging(value);
					this.SendPropertyChanging();
					this._BusinessObjectives = value;
					this.SendPropertyChanged("BusinessObjectives");
					this.OnBusinessObjectivesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNIC", DbType="VarChar(30)")]
		public string CNIC
		{
			get
			{
				return this._CNIC;
			}
			set
			{
				if ((this._CNIC != value))
				{
					this.OnCNICChanging(value);
					this.SendPropertyChanging();
					this._CNIC = value;
					this.SendPropertyChanged("CNIC");
					this.OnCNICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorporationNo", DbType="VarChar(30)")]
		public string IncorporationNo
		{
			get
			{
				return this._IncorporationNo;
			}
			set
			{
				if ((this._IncorporationNo != value))
				{
					this.OnIncorporationNoChanging(value);
					this.SendPropertyChanging();
					this._IncorporationNo = value;
					this.SendPropertyChanged("IncorporationNo");
					this.OnIncorporationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNo", DbType="VarChar(30)")]
		public string RegistrationNo
		{
			get
			{
				return this._RegistrationNo;
			}
			set
			{
				if ((this._RegistrationNo != value))
				{
					this.OnRegistrationNoChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNo = value;
					this.SendPropertyChanged("RegistrationNo");
					this.OnRegistrationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredWith", DbType="VarChar(30)")]
		public string RegisteredWith
		{
			get
			{
				return this._RegisteredWith;
			}
			set
			{
				if ((this._RegisteredWith != value))
				{
					this.OnRegisteredWithChanging(value);
					this.SendPropertyChanging();
					this._RegisteredWith = value;
					this.SendPropertyChanged("RegisteredWith");
					this.OnRegisteredWithChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="VarChar(30)")]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="VarChar(30)")]
		public string MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNo", DbType="VarChar(30)")]
		public string FaxNo
		{
			get
			{
				return this._FaxNo;
			}
			set
			{
				if ((this._FaxNo != value))
				{
					this.OnFaxNoChanging(value);
					this.SendPropertyChanging();
					this._FaxNo = value;
					this.SendPropertyChanged("FaxNo");
					this.OnFaxNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedById", DbType="BigInt NOT NULL")]
		public long CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedById", DbType="BigInt")]
		public System.Nullable<long> UpdatedById
		{
			get
			{
				return this._UpdatedById;
			}
			set
			{
				if ((this._UpdatedById != value))
				{
					this.OnUpdatedByIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedById = value;
					this.SendPropertyChanged("UpdatedById");
					this.OnUpdatedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NTN", DbType="VarChar(30)")]
		public string NTN
		{
			get
			{
				return this._NTN;
			}
			set
			{
				if ((this._NTN != value))
				{
					this.OnNTNChanging(value);
					this.SendPropertyChanging();
					this._NTN = value;
					this.SendPropertyChanged("NTN");
					this.OnNTNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PINCode", DbType="Int")]
		public System.Nullable<int> PINCode
		{
			get
			{
				return this._PINCode;
			}
			set
			{
				if ((this._PINCode != value))
				{
					this.OnPINCodeChanging(value);
					this.SendPropertyChanging();
					this._PINCode = value;
					this.SendPropertyChanged("PINCode");
					this.OnPINCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FBRLogin", DbType="Int")]
		public System.Nullable<int> FBRLogin
		{
			get
			{
				return this._FBRLogin;
			}
			set
			{
				if ((this._FBRLogin != value))
				{
					this.OnFBRLoginChanging(value);
					this.SendPropertyChanging();
					this._FBRLogin = value;
					this.SendPropertyChanged("FBRLogin");
					this.OnFBRLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FBRPassword", DbType="VarChar(30)")]
		public string FBRPassword
		{
			get
			{
				return this._FBRPassword;
			}
			set
			{
				if ((this._FBRPassword != value))
				{
					this.OnFBRPasswordChanging(value);
					this.SendPropertyChanging();
					this._FBRPassword = value;
					this.SendPropertyChanged("FBRPassword");
					this.OnFBRPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblService", Storage="_TblServices", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<TblService> TblServices
		{
			get
			{
				return this._TblServices;
			}
			set
			{
				this._TblServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblAudit", Storage="_TblAudits", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<TblAudit> TblAudits
		{
			get
			{
				return this._TblAudits;
			}
			set
			{
				this._TblAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblCorporate", Storage="_TblCorporates", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<TblCorporate> TblCorporates
		{
			get
			{
				return this._TblCorporates;
			}
			set
			{
				this._TblCorporates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblTax", Storage="_TblTaxes", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<TblTax> TblTaxes
		{
			get
			{
				return this._TblTaxes;
			}
			set
			{
				this._TblTaxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblBusinessType", Storage="_TblBusinessTypes", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<TblBusinessType> TblBusinessTypes
		{
			get
			{
				return this._TblBusinessTypes;
			}
			set
			{
				this._TblBusinessTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblClient", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblClients.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblClients.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblServices(TblService entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_TblServices(TblService entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
		
		private void attach_TblAudits(TblAudit entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_TblAudits(TblAudit entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
		
		private void attach_TblCorporates(TblCorporate entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_TblCorporates(TblCorporate entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
		
		private void attach_TblTaxes(TblTax entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_TblTaxes(TblTax entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
		
		private void attach_TblBusinessTypes(TblBusinessType entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = this;
		}
		
		private void detach_TblBusinessTypes(TblBusinessType entity)
		{
			this.SendPropertyChanging();
			entity.TblClient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblBusinessType")]
	public partial class TblBusinessType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private int _BusinessType;
		
		private EntityRef<TblClient> _TblClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnBusinessTypeChanging(int value);
    partial void OnBusinessTypeChanged();
    #endregion
		
		public TblBusinessType()
		{
			this._TblClient = default(EntityRef<TblClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._TblClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessType", DbType="Int NOT NULL")]
		public int BusinessType
		{
			get
			{
				return this._BusinessType;
			}
			set
			{
				if ((this._BusinessType != value))
				{
					this.OnBusinessTypeChanging(value);
					this.SendPropertyChanging();
					this._BusinessType = value;
					this.SendPropertyChanged("BusinessType");
					this.OnBusinessTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClient_TblBusinessType", Storage="_TblClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public TblClient TblClient
		{
			get
			{
				return this._TblClient.Entity;
			}
			set
			{
				TblClient previousValue = this._TblClient.Entity;
				if (((previousValue != value) 
							|| (this._TblClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClient.Entity = null;
						previousValue.TblBusinessTypes.Remove(this);
					}
					this._TblClient.Entity = value;
					if ((value != null))
					{
						value.TblBusinessTypes.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("TblClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAttendance")]
	public partial class tblAttendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private System.DateTime _EnteranceTime;
		
		private System.DateTime _ExitTime;
		
		private bool _IsPresent;
		
		private EntityRef<TblUser> _TblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEnteranceTimeChanging(System.DateTime value);
    partial void OnEnteranceTimeChanged();
    partial void OnExitTimeChanging(System.DateTime value);
    partial void OnExitTimeChanged();
    partial void OnIsPresentChanging(bool value);
    partial void OnIsPresentChanged();
    #endregion
		
		public tblAttendance()
		{
			this._TblUser = default(EntityRef<TblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteranceTime", DbType="DateTime NOT NULL")]
		public System.DateTime EnteranceTime
		{
			get
			{
				return this._EnteranceTime;
			}
			set
			{
				if ((this._EnteranceTime != value))
				{
					this.OnEnteranceTimeChanging(value);
					this.SendPropertyChanging();
					this._EnteranceTime = value;
					this.SendPropertyChanged("EnteranceTime");
					this.OnEnteranceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitTime", DbType="DateTime NOT NULL")]
		public System.DateTime ExitTime
		{
			get
			{
				return this._ExitTime;
			}
			set
			{
				if ((this._ExitTime != value))
				{
					this.OnExitTimeChanging(value);
					this.SendPropertyChanging();
					this._ExitTime = value;
					this.SendPropertyChanged("ExitTime");
					this.OnExitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPresent", DbType="Bit NOT NULL")]
		public bool IsPresent
		{
			get
			{
				return this._IsPresent;
			}
			set
			{
				if ((this._IsPresent != value))
				{
					this.OnIsPresentChanging(value);
					this.SendPropertyChanging();
					this._IsPresent = value;
					this.SendPropertyChanged("IsPresent");
					this.OnIsPresentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_tblAttendance", Storage="_TblUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.tblAttendances.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.tblAttendances.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
